(in-package #:ld34)
(in-readtable :qtools)

(eval-when (:compile-toplevel :load-toplevel :execute)
  (defclass player (sprite-entity hitbox-entity damageable-entity)
    ((v :initform (vec 0 0 0) :accessor v)
     (vmax :initform 15 :accessor vmax)
     (vacc :initform 2 :accessor vacc)
     (vdcc :initform 0.65 :accessor vdcc)
     (invincible :initform NIL :accessor invincible)
     (keymap :initform (make-hash-table :test 'eql) :accessor keymap))
    (:default-initargs
     :name :player
     :spritesheet "player"
     :health 10000)))

(defmethod initialize-instance :after ((player player) &key)
  (let ((keymap (keymap player)))
    (setf (gethash :left keymap) (q+:qt.key_left)
          (gethash :right keymap) (q+:qt.key_right)
          (gethash :up keymap) (q+:qt.key_up)
          (gethash :down keymap) (q+:qt.key_down)
          (gethash :light-punch keymap) (q+:qt.key_z)
          (gethash :heavy-punch keymap) (q+:qt.key_x))))

(defmethod key ((player player) key)
  (gethash key (keymap player)))

(defmethod update ((player player))
  (call-next-method)
  (with-slots-bound (player player)
    (let ((motion-input NIL))
      (when (key-pressed-p (key player :left))
        (decf (x v) vacc)
        (setf motion-input T))
      (when (key-pressed-p (key player :right))
        (incf (x v) vacc)
        (setf motion-input T))
      (when (key-pressed-p (key player :down))
        (decf (y v) vacc)
        (setf motion-input T))
      (when (key-pressed-p (key player :up))
        (incf (y v) vacc)
        (setf motion-input T))
      (cond ((<= (size v) vdcc)
             (scale v 0))
            ((not motion-input)
             (scale v vdcc))))
    (when (<= vvmax (size v) vdcc)
      (scale v (/ vmax (size v))))
    (when invincible
      (with-timer-ready 'invincible 3
        (timer-ready-p 'invincible 3 (level))
        (setf invincible NIL)))
    (incf (x (location player)) (x v))
    (incf (y (location player)) (y v))
    (cap (level) (location player))))

(defmethod paint ((player player) target)
  (unless (and (invincible player) (timer-ready-p 'invincible-blink 0.1 (level)))
    (call-next-method)))
